# =================================== project ====================================
[project]
  name = "showcov"
  dynamic = ["version"]
  description = "Print out uncovered code."
  readme = "README.md"
  authors = [
    { name = "Joseph M. Courtney", email = "joseph.m.courtney@gmail.com" },
  ]
  urls = { "Homepage" = "https://github.com/josephcourtney/showcov", "Bug Tracker" = "https://github.com/josephcourtney/showcov/issues" }
  license = { text = "MIT License" }
  classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Operating System :: OS Independent",
  ]
  requires-python = ">=3.12"
  dependencies = [
    "colorama>=0.4.6",
    "configparser>=7.1.0",
    "defusedxml>=0.7.1",
  ]

  [project.scripts]
    showcov = "showcov.main:main"

[dependency-groups]
  dev = [
    "basedpyright>=1.28.1",
    "coverage>=7.6.10",
    "pytest-cov>=6.0.0",
    "pytest-randomly>=3.16.0",
    "pytest>=8.3.5",
    "ruff>=0.9.4",
    "types-colorama>=0.4.15.20240311",
    "types-defusedxml>=0.7.0.20240218",
    "types-toml>=0.10.8.20240310",
  ]

# =================================== build ====================================
[build-system]
  requires      = ["hatchling"]
  build-backend = "hatchling.build"


[tool.hatch.build]
  includes = ["src/showcov/**"]

[tool.hatch.version]
  path = "src/showcov/__version__.py"

# ==================================== lint ====================================
[tool.ruff]
  extend = "./ruff.default.toml"

  [tool.ruff.lint]
    ignore = []

# =================================== typecheck ===================================
[tool.basedpyright]
  typeCheckingMode = "recommended"
  pythonVersion = "3.13"
  pythonPlatform = "Darwin"
  reportImplicitOverride = false
  reportMissingTypeStubs = false
  reportUnusedParameter = false
  executionEnvironments = [
    { root = "tests", reportPrivateUsage = false, reportUnusedCallResult = false, extraPaths = [] },
  ]


  # =================================== test ===================================

[tool.pytest.ini_options]
  addopts = [
    "--cov=showcov",
    "--cov-report=xml",
    "--cov-report=term-missing",
  ]
  testpaths = ["tests"]

# =================================== test:coverage ===================================
[tool.coverage.run]
  source   = ["."]
  branch   = true
  parallel = true

[tool.coverage.report]
  show_missing = true
  skip_covered = true
  # Regexes for lines to exclude from consideration
  exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
  ]
  ignore_errors = true

[tool.coverage.xml]
  output = ".coverage.xml"
